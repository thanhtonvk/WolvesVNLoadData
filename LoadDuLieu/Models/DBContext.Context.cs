//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LoadDuLieu.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBContext : DbContext
    {
        public DBContext()
            : base("name=DBContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<BanLenh> BanLenhs { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<DoiTac> DoiTacs { get; set; }
        public virtual DbSet<DoiTien> DoiTiens { get; set; }
        public virtual DbSet<Gold> Golds { get; set; }
        public virtual DbSet<Invite> Invites { get; set; }
        public virtual DbSet<LoadWolf> LoadWolves { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<NewWolf> NewWolves { get; set; }
        public virtual DbSet<PackVIP> PackVIPs { get; set; }
        public virtual DbSet<Rate> Rates { get; set; }
        public virtual DbSet<SanGiaoDich> SanGiaoDiches { get; set; }
        public virtual DbSet<Symbol> Symbols { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<ThongKe> ThongKes { get; set; }
        public virtual DbSet<TinHieuPost> TinHieuPosts { get; set; }
        public virtual DbSet<TongQuat> TongQuats { get; set; }
        public virtual DbSet<Video> Videos { get; set; }
        public virtual DbSet<VIP> VIPs { get; set; }
    
        public virtual int AddBanLenh(Nullable<System.DateTime> date, string content, Nullable<double> tP, Nullable<double> sL, string image)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var tPParameter = tP.HasValue ?
                new ObjectParameter("TP", tP) :
                new ObjectParameter("TP", typeof(double));
    
            var sLParameter = sL.HasValue ?
                new ObjectParameter("SL", sL) :
                new ObjectParameter("SL", typeof(double));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBanLenh", dateParameter, contentParameter, tPParameter, sLParameter, imageParameter);
        }
    
        public virtual int AddNews(Nullable<System.DateTime> date, Nullable<System.TimeSpan> time, string content, Nullable<bool> type)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(System.TimeSpan));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNews", dateParameter, timeParameter, contentParameter, typeParameter);
        }
    
        public virtual int BlockAccount(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BlockAccount", idParameter);
        }
    
        public virtual ObjectResult<CheckVIP_Result> CheckVIP(Nullable<int> idAccount)
        {
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckVIP_Result>("CheckVIP", idAccountParameter);
        }
    
        public virtual int ConfirmDoiTien(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConfirmDoiTien", idParameter);
        }
    
        public virtual int ConfirmWolves(Nullable<int> id, Nullable<int> idAccount, Nullable<int> wolves)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var wolvesParameter = wolves.HasValue ?
                new ObjectParameter("Wolves", wolves) :
                new ObjectParameter("Wolves", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConfirmWolves", idParameter, idAccountParameter, wolvesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CountAccount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CountAccount");
        }
    
        public virtual ObjectResult<GetAccountList_Result> GetAccountList(Nullable<int> page)
        {
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountList_Result>("GetAccountList", pageParameter);
        }
    
        public virtual ObjectResult<GetBanLenh_Result> GetBanLenh(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBanLenh_Result>("GetBanLenh", dateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetCountLoadWolvesCancel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCountLoadWolvesCancel");
        }
    
        public virtual ObjectResult<Nullable<int>> GetCountLoadWolvesConfirmed()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCountLoadWolvesConfirmed");
        }
    
        public virtual ObjectResult<Nullable<int>> GetCountLoadWolvesWaiting()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCountLoadWolvesWaiting");
        }
    
        public virtual ObjectResult<GetCurrentAndPrevByNameAndDay_Result> GetCurrentAndPrevByNameAndDay(string name, Nullable<System.DateTime> date)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCurrentAndPrevByNameAndDay_Result>("GetCurrentAndPrevByNameAndDay", nameParameter, dateParameter);
        }
    
        public virtual ObjectResult<GetCurrentAndPrevRate_Result> GetCurrentAndPrevRate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCurrentAndPrevRate_Result>("GetCurrentAndPrevRate");
        }
    
        public virtual ObjectResult<GetDoiTien_Result> GetDoiTien()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDoiTien_Result>("GetDoiTien");
        }
    
        public virtual ObjectResult<Nullable<int>> GetIDByEmail(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetIDByEmail", emailParameter);
        }
    
        public virtual ObjectResult<GetInvited_Result> GetInvited(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInvited_Result>("GetInvited", idParameter);
        }
    
        public virtual ObjectResult<GetLastRateByName_Result> GetLastRateByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLastRateByName_Result>("GetLastRateByName", nameParameter);
        }
    
        public virtual ObjectResult<GetLastTinHieuPost_Result> GetLastTinHieuPost()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLastTinHieuPost_Result>("GetLastTinHieuPost");
        }
    
        public virtual ObjectResult<GetLoadWolvesListCancel_Result> GetLoadWolvesListCancel(Nullable<int> page)
        {
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLoadWolvesListCancel_Result>("GetLoadWolvesListCancel", pageParameter);
        }
    
        public virtual ObjectResult<GetLoadWolvesListConfirmed_Result> GetLoadWolvesListConfirmed(Nullable<int> page)
        {
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLoadWolvesListConfirmed_Result>("GetLoadWolvesListConfirmed", pageParameter);
        }
    
        public virtual ObjectResult<GetLoadWolvesListWaiting_Result> GetLoadWolvesListWaiting(Nullable<int> page)
        {
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLoadWolvesListWaiting_Result>("GetLoadWolvesListWaiting", pageParameter);
        }
    
        public virtual ObjectResult<GetMinMaxInDay_Result> GetMinMaxInDay(string name, Nullable<System.DateTime> date)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMinMaxInDay_Result>("GetMinMaxInDay", nameParameter, dateParameter);
        }
    
        public virtual ObjectResult<GetNews_Result> GetNews()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNews_Result>("GetNews");
        }
    
        public virtual ObjectResult<GetNewsByDate_Result> GetNewsByDate(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNewsByDate_Result>("GetNewsByDate", dateParameter);
        }
    
        public virtual ObjectResult<GetNewsVip_Result> GetNewsVip()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNewsVip_Result>("GetNewsVip");
        }
    
        public virtual ObjectResult<GetNewsVipByDate_Result> GetNewsVipByDate(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNewsVipByDate_Result>("GetNewsVipByDate", dateParameter);
        }
    
        public virtual ObjectResult<GetRateByNameAndDate_Result> GetRateByNameAndDate(string name, Nullable<System.DateTime> date)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRateByNameAndDate_Result>("GetRateByNameAndDate", nameParameter, dateParameter);
        }
    
        public virtual ObjectResult<string> GetSymbolList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetSymbolList");
        }
    
        public virtual ObjectResult<GetThongKe_Result> GetThongKe(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetThongKe_Result>("GetThongKe", dateParameter);
        }
    
        public virtual ObjectResult<GetTinHieuPost_Result> GetTinHieuPost(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTinHieuPost_Result>("GetTinHieuPost", dateParameter);
        }
    
        public virtual ObjectResult<GetTongQuat_Result> GetTongQuat()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTongQuat_Result>("GetTongQuat");
        }
    
        public virtual int InputInvite(Nullable<int> presenter, Nullable<int> preseentee)
        {
            var presenterParameter = presenter.HasValue ?
                new ObjectParameter("Presenter", presenter) :
                new ObjectParameter("Presenter", typeof(int));
    
            var preseenteeParameter = preseentee.HasValue ?
                new ObjectParameter("Preseentee", preseentee) :
                new ObjectParameter("Preseentee", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InputInvite", presenterParameter, preseenteeParameter);
        }
    
        public virtual int InsertDoiTien(Nullable<int> idAccount, Nullable<int> quantity, string sTK, string bank, string nameBank)
        {
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var sTKParameter = sTK != null ?
                new ObjectParameter("STK", sTK) :
                new ObjectParameter("STK", typeof(string));
    
            var bankParameter = bank != null ?
                new ObjectParameter("Bank", bank) :
                new ObjectParameter("Bank", typeof(string));
    
            var nameBankParameter = nameBank != null ?
                new ObjectParameter("NameBank", nameBank) :
                new ObjectParameter("NameBank", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDoiTien", idAccountParameter, quantityParameter, sTKParameter, bankParameter, nameBankParameter);
        }
    
        public virtual int InsertRate(string name, Nullable<double> buy, Nullable<double> rate)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var buyParameter = buy.HasValue ?
                new ObjectParameter("Buy", buy) :
                new ObjectParameter("Buy", typeof(double));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRate", nameParameter, buyParameter, rateParameter);
        }
    
        public virtual int InsertSymbol(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSymbol", nameParameter);
        }
    
        public virtual int LoadingWolves(Nullable<int> wolves, Nullable<int> idAccount)
        {
            var wolvesParameter = wolves.HasValue ?
                new ObjectParameter("Wolves", wolves) :
                new ObjectParameter("Wolves", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoadingWolves", wolvesParameter, idAccountParameter);
        }
    
        public virtual ObjectResult<LoginAccount_Result> LoginAccount(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoginAccount_Result>("LoginAccount", emailParameter);
        }
    
        public virtual int Register(string phoneNumber, string email, string firstName, string lastName, Nullable<System.DateTime> dateOfBirth, string avatar)
        {
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var avatarParameter = avatar != null ?
                new ObjectParameter("Avatar", avatar) :
                new ObjectParameter("Avatar", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Register", phoneNumberParameter, emailParameter, firstNameParameter, lastNameParameter, dateOfBirthParameter, avatarParameter);
        }
    
        public virtual int RegisterVIP(Nullable<int> month, Nullable<int> type, Nullable<int> wol, Nullable<int> idAccount)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var wolParameter = wol.HasValue ?
                new ObjectParameter("Wol", wol) :
                new ObjectParameter("Wol", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegisterVIP", monthParameter, typeParameter, wolParameter, idAccountParameter);
        }
    
        public virtual ObjectResult<SearchAccount_Result> SearchAccount(string keyword)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchAccount_Result>("SearchAccount", keywordParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UnBlockAccount(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UnBlockAccount", idParameter);
        }
    
        public virtual int UpdateAccount(Nullable<int> id, string phoneNumber, string email, string firstName, string lastName, Nullable<System.DateTime> dateOfBirth, string avatar)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var avatarParameter = avatar != null ?
                new ObjectParameter("Avatar", avatar) :
                new ObjectParameter("Avatar", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAccount", idParameter, phoneNumberParameter, emailParameter, firstNameParameter, lastNameParameter, dateOfBirthParameter, avatarParameter);
        }
    }
}
